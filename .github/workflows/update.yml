name: daily-update          # 워크플로 이름
on:
  schedule:                 # 매일 03:30 UTC (12:30 KST) 실행
    - cron: '30 3 * * *'
  workflow_dispatch:        # 수동 실행 버튼

permissions:                # ⬅️  github-actions[bot] 에 push 권한 부여
  contents: write

concurrency:                # 동시에 2개 이상 실행되지 않도록
  group: data-update
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1) Repo 체크아웃
    - name: Check out
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2) 파이썬 셋업
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # 3) 의존성 설치
    - name: Install deps
      run: |
        pip install -r requirements.txt

    # 4) 데이터 수집 스크립트 실행
    - name: Run fetch_data.py
      env:
        FRED_KEY:  ${{ secrets.FRED_KEY }}
        ECOS_KEY:  ${{ secrets.ECOS_KEY }}
        MOLIT_KEY: ${{ secrets.MOLIT_KEY }}
        RTMS_AREA: ${{ secrets.RTMS_AREA }}
      run: |
        echo "FRED_KEY length: ${#FRED_KEY}"
        echo "ECOS_KEY length: ${#ECOS_KEY}"
        python fetch_data.py

    # 5) (선택) 새로 생성된 CSV → 아티팩트로 업로드
    - name: Upload all_data artifact
      uses: actions/upload-artifact@v4
      with:
        name: all_data-CSV
        path: data/all_data.csv
        retention-days: 3      # 3일 후 자동 삭제

    # 6) 코드·스크립트 변경사항만 커밋-푸시
    - name: Commit & push (스크립트만)
      run: |
        git config user.name  github-actions
        git config user.email github-actions@github.com
        # 변경된 소스 파일만 스테이징 (data/all_data.csv 는 .gitignore 로 무시됨)
        git add -u
        git commit -m "chore: refresh scripts $(date '+%F %T')" || exit 0
        git push origin "${GITHUB_REF##*/}"
